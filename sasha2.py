"""№1"""

input_string = "abcdef"
dict1 = {symbol: number + 1 for number, symbol in enumerate(input_string)}

# для словарей можно использовать генератор, так же как и для списков
"""
В Python есть еще одна встроенная функция, которая часто используется в заголовке for. Это функция enumerate(). Если range() позволяет получить только индексы элементов списка, то enumerate() – сразу индекс элемента и его значение.

Функция enumerate() применяется для так называемых итерируемых объектов (список относится к таковым) и создает объект-генератор, который генерирует кортежи, состоящие из двух элементов – индекса элемента и самого элемента.
"""
# вписывая в цикл enumerate в symbol e меня попадает второй элемент кортежа - смвол, а в number - его индекс в строке
# но поскольку нужно вывести номер, прибавляю к намбер +1
print(dict1)


"""№2"""
list2 = ['a', 'b', 'c']
dict2 = {'a': 1, 'b': 2, 'd': 3}

# пробежимся по списку и проверим каждый элемент на вхождение
# в случае если в словаре есть элемент из списка увеличим счетчик
count = 0
for element in list2:
        if element in dict2:
            count += 1
print(count)

"""№3"""
string3 = "evgene_o"
dict3 = {}
# пройдемся по каждому символу в строке: если символ уже в словаре - прибавляем к количеству 1
# иначе - значит символ еще не встречался, то есть присваеваем количество 1 по ключу symbol
for symbol in string3:
    if symbol in dict3:
        dict3[symbol] += 1
    else:
        dict3[symbol] = 1
print(dict3)

"""№4"""
amount_of_letters = 0
# пробежимся по ключам словаря и проверим являются ли они буквами
for key in dict3:
    if key.isalpha():
        amount_of_letters += 1
print(amount_of_letters)

"""№5"""
dict1 = {'1': 1, '2': 2}
dict2 = {'3': 3, '4': 4}
dict3 = {'5': 5, '6': 6}

dict4 = {} # dic
# cоединим словари с помощью функции update()
dict4.update(dict1)
dict4.update(dict2)
dict4.update(dict3)

print(dict4)

"""№6"""
# Просуммируем список всех значений dict4, который возвращает функция values()
print(sum(dict4.values()))

"""№7"""
peremnozh = 1
# пробежимся по списку значений и перемножим все элементы между собой
for el in dict4.values():
    peremnozh *= el
print(peremnozh)

"""№8"""
s = 0
# Метод items() возвращает пары «ключ — значение»(в виде списка кортежей)
for pair in dict4.items():
    s += int(pair[0]) * pair[1]
print(s)

"""№9"""
dic5 = {'a': 1, 'b': 2}
dic6 = {'a': 3, 'c': 4, 'd': 5}

"""
В данном примере мы используем генератор словаря
({key: value for key, value in dic6.items() if key not in dic5})
для создания словаря dic7. Мы проходимся по парам ключ-значение в словаре
dic6 и только те пары, у которых ключи не встречаются в словаре dic5,
добавляются в словарь dic7. В результате получаем словарь dic7,
в котором отсутствуют пары с ключами, встречающимися в словаре dic5.
"""
dic7 = {key: value for key, value in dic6.items() if key not in dic5}

print(dic7)

"""№10"""
dic5 = {'a': 1, 'b': 2}
dic6 = {'a': 3, 'c': 4, 'd': 5}

dic8 = dict(dic5)  # Создаем копию dic5

"""
В данном примере мы создаем словарь dic8 путем копирования всех пар ключ-значение
из dic5 с помощью dict(dic5). Затем мы проходимся по парам ключ-значение
в словаре dic6 и для каждого ключа, который отсутствует в dic8,
добавляем соответствующую пару ключ-значение в dic8.
В результате получаем словарь dic8, в котором содержатся все пары ключ-значение из dic5, а также
пары для ключей, которые есть в dic6, но отсутствуют в dic5
"""
for key, value in dic6.items():
    if key not in dic8:
        dic8[key] = value

print(dic8)

"""№11"""
ri1 = [3, 1, 2, 2, 4, 3, 5, 4]

# set(ri1) обращает список в множество, а во множестве не бывает потворяющихся элементов
# sorted создает копию списка ri1 тоько отсортированную
unique_sorted_list = sorted(set(ri1))

print(unique_sorted_list)

"""№12"""
input_list = [[1, 2, 3], [4, 5, 6, 7], [9, 2]]
output_list = []
# пройдемся по вложенным спискам циклом и добавим в отдельный список первый и последний элемент каждого списка
for lst in input_list:
    output_list.append(lst[0])
    output_list.append(lst[-1])
print(output_list)

